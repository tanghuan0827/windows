Java并行程序基础

	exe执行的时候，文件中的指令会被加载，能得到一个有关exec程序的一个进程
	
	进程就是轻量级的进程，是程序执行的最小单位。
	线程间的切换和调度的成本远远小于进程。
	
	线程的状态
	NEW RUNNABLE  BLOCKED  WAITING  TIMED_WAITING TERMINATED
	
	Thread.stop()方法在结束线程后，会直接终止线程，并且会立即释放这个线程所持有的锁。而这些锁恰恰用于维持对象的一致性。
	
	线程中断 
	给线程发送一个通知，告知目标线程，有人希望你退出 至于目标线程接到通知后如何处理，则完全由目标线程自行决定。
	
	2.2.4 等待wait和通知notify机制
	notify会随机的唤醒一个线程
	notifyall会随机的唤醒等待队列中的所有等待线程，而不是随机的一个。
	
	synchronized获取object监视器
	
	取得object监视器 
	object.notify()
	
	wait会释放notify的锁
	
	2.2.5 挂起suspend和继续执行resume线程
	线程挂起suspend和继续执行resume 
	
	2.2.6 等待线程结束join 和谦让 yield
	join等待线程执行完毕才执行 不要在Thread对象实例上使用类似wait 或者notify等方法，可能影响系统api的操作
	
	yield 当前线程让出cpu,但是还会进行cpu的争夺，但是能否能够再次被分配到，就不一定了。
	
	============================================================
	2.3 volatile与Java内存模型 JMM
	java内存模型 围绕原子性 有序性 和 可见性展开
	
	volatile无法保证原子操作
	
	============================================================
	2.4 分门别类的管理：线程组
	最好给每个线程组起特殊的名字，好让后台报错的时候，还可以查看线程出在哪里的错
	============================================================
	2.5驻守后台 守护线程
	
	============================================================
	2.6 先干重要的是 线程优先级
	
	============================================================
	2.7 线程安全的概念与synchronized
	高效率不能以牺牲正确性为代价。
	
	两个线程同时会对i进行写入，其中一个线程的结果会覆盖另外一个
	
	关键字synchronized的作用就是实现线程间的同步，它的工作就是对同步的代码加锁，是每一次只能有一个线程进入同步代码块，从而保证线程的安全性。
	
	指定加锁对象 直接作用于实例方法 给定对象加锁
	相当于当前实例加锁，进入同步代码前要获得当前实例的锁
	直接作用于静态方法 相当于当前类加锁，进入同步代码前要获得当前类的锁
	
	两个线程的Runnable实例并不是同一个对象。线程t1会在进入同步方法中加锁自己的Runnable实例。线程t2也关注与自己的对象锁。两个线程使用了2把不同的锁。因此，线程安全是无法保证的。
	
	static synchronized
	限制每次只有一个线程可以访问同步代码块。无论同步代码块的代码如何乱序执行，只要保证串行语义一致性，那么执行的结果总是一样的。
	
	被synchronized限制的多个线程是串行执行的。
	
	============================================================
	2.8 程序中的幽灵：隐蔽的错误
	ArrayList线程不安全
	
	2.8.3 并发下诡异的HashMap
	hashmap在jdk1.7 线程不安全的
	
	============================================================

	
	
	
	
	














































