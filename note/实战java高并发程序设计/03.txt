第三章 JDK并发包
	更加丰富多彩的多线程控制方法
	将详细介绍jdk对线程池的支持，使用线程池，将能很大程度的提高线程调度性能
	
	jdk的并发容器，这些容器专为并行访问设计，绝对高效 安全 稳定的实用工具
	
	3.1 多线程的团队协作：同步控制
	等待和通知机制
	synchronized Object.wait()  Object.notify()
	
	3.1.1 synchronized的功能扩展 重入锁
	这里锁的可重入，局限于一个线程，这种锁是可以反复进入的
	
	一个线程多次获得锁，那么在释放锁的时候，也必须释放同样的次数。
	
	如果一个线程正在等待锁，那么它依然可以收到一个通知，被告知无须再等待，可以停止工作了，
	
	真正完成工作的只有t1,t2则放弃任务直接退出
	
	锁申请等待限时
	如果给定一个等待时间，让线程自动放弃，那么对系统来说是有意义的 tryLock()方法进行一次限时的等待
	
	当前线程会尝试获得锁，如果锁并未被其他线程占用，则申请锁会成功，并立即返回true,如果锁被其他线程占用，则当前线程不会等待，而立即返回false
	
	tryLock这种情况就会大为改善，由于线程不会傻傻的等待，而是不停的尝试，因此，只要执行足够长的时间，线程总会得到所有需要的资源
	
	公平锁
	公平锁要求系统维护一个有序队列，因此公平锁实现的成本比较高，性能比较低。公平锁和非公平锁在线程的调度上也是非常的不一样。
	
	在重入锁的实现中，主要包含三个要素
	是原子状态
	是等待队列
	是阻塞原语
	
	============================================================
	3.1.2 重入锁的好搭档 ：Condition条件
	
	利用Condition对象，我们可以让线程在合适的时间等待，或者某一特定的时刻得到通知，继续执行
	
	await方法当前线程等待，同时释放锁，当其他线程中使用signal或者signalAll方法时，线程会重新获得锁并继续执行。或者当前线程中断，也能跳出等待。
	awaitUninterruptibly方法和await方法基本相同，但是它并不会在等待过程中响应中断
	signal方法唤醒一个在等待中的线程
	
	============================================================
	3.1.3 允许多个线程同时访问 ：信号量
	信号量可以指定多个线程，同时访问某一个资源
	
	信号量必须指定信号量的准入数，即同时能申请多少个许可。每个线程每次只申请一个许可。
	
	5个线程为一组，同时开启20个线程
	
	============================================================
	3.1.4 ReadWriteLock读写锁
	读写分离锁可以减少锁的竞争，以提高系统的性能。
	
	只有读和读之间才是 非阻塞的
	
	============================================================
	3.1.5 倒计时器 CountDownLatch
	使得线程等待所有的检查线程全部完工后，再执行
	
	============================================================
	3.1.6 循环栅栏
	我们将计数器设置为10 那么凑齐一批10个线程，计数器归零，接着凑齐下一批10个线程
	
	============================================================
	3.1.7 线程阻塞工具 LockSupport
	
	============================================================
	3.2 线程复用：线程池
	从线程池获得空闲线程，关闭线程变成从池子中归还线程。
	
	newFixedThreadPool
	newSingleThreadExecutor
	newCachedThreadPool
	newSingleThreadScheduledExecutor
	newScheduledThreadPool
	
	如果任务出现异常，那么后续的所有子任务都会停止调度，因此，必须保证异常被及时处理，为周期性任务的稳定调度提供条件。
	
	============================================================
	3.2.3 核心线程池的内部实现
	ThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit, BlockingQueue<Runnable> workQueue, ThreadFactory threadFactory, RejectedExecutionHandler handler)
	
	============================================================
	3.2.6 我的应用我做主：扩展线程池
	shutdown方法关闭线程池，这是一个比较安全的方法，并不会立即终止所有的任务，它会等待所有任务执行完成后，再关闭线程池，但它并不会等待所有线程执行完成后再返回，这个线程池不能再接受其他新的任务了。
	
	============================================================
	3.2.7 合理选择 优化线程池的数量
	
	============================================================
	3.2.8 堆栈去哪里了：在线程池中寻找堆栈
	线程池可能会吃掉程序抛出的异常，我们对此一无所知
	
	============================================================
	3.2.9 Fork/Join框架
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	